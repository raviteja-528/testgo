# fetch_resolvers.py

import argparse
import oci
import json

def get_dns_resolvers(virtual_network_client, compartment_id):
    vcn_list = virtual_network_client.list_vcns(compartment_id=compartment_id).data
    matched_resolvers = []
    for vcn in vcn_list:
        try:
            # Fetch all resolvers in the compartment (since list_resolvers doesn't accept vcn_id)
            resolvers = virtual_network_client.list_resolvers(compartment_id=compartment_id).data
            for resolver in resolvers:
                # Since SDK doesn't expose vcn_id directly, assume all resolvers belong to compartment
                matched_resolvers.append(resolver.id)
        except Exception as e:
            print(f"[ERROR] Failed to fetch resolvers for VCN {vcn.display_name}: {str(e)}")
    return matched_resolvers

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--compartment-id', required=True)
    parser.add_argument('--region', required=True)
    parser.add_argument('--config', default='~/.oci/config')
    parser.add_argument('--profile', default='DEFAULT')
    args = parser.parse_args()

    config = oci.config.from_file(args.config, args.profile)
    signer = oci.signer.Signer(
        tenancy=config["tenancy"],
        user=config["user"],
        fingerprint=config["fingerprint"],
        private_key_file_location=config["key_file"],
        pass_phrase=config.get("pass_phrase")
    )

    virtual_network_client = oci.dns.DnsClient(config, signer=signer)
    resolver_ids = get_dns_resolvers(virtual_network_client, args.compartment_id)

    print(json.dumps(resolver_ids))

if __name__ == "__main__":
    main()


# delete_endpoints_views.py

import argparse
import subprocess
import json

def delete_endpoints(resolver_ids, region, config, profile):
    for resolver_id in resolver_ids:
        try:
            result = subprocess.run([
                "oci", "dns", "resolver", "endpoint", "list",
                "--resolver-id", resolver_id,
                "--region", region,
                "--query", "data[*].name",
                "--raw-output",
                "--config-file", config,
                "--profile", profile
            ], capture_output=True, text=True, check=True)

            endpoint_names = result.stdout.strip().splitlines()
            for ep in endpoint_names:
                print(f"[INFO] Deleting DNS Resolver Endpoint: {ep}")
                subprocess.run([
                    "oci", "dns", "resolver", "endpoint", "delete",
                    "--resolver-id", resolver_id,
                    "--resolver-endpoint-name", ep,
                    "--region", region,
                    "--force",
                    "--config-file", config,
                    "--profile", profile
                ], check=True)
        except subprocess.CalledProcessError as e:
            print(f"[ERROR] Failed to delete resolver endpoints: {e.stderr.strip()}")

def detach_and_delete_views(resolver_ids, region, config, profile):
    for resolver_id in resolver_ids:
        try:
            result = subprocess.run([
                "oci", "dns", "resolver", "endpoint-association", "list",
                "--resolver-id", resolver_id,
                "--region", region,
                "--query", "data[*]",
                "--raw-output",
                "--config-file", config,
                "--profile", profile
            ], capture_output=True, text=True, check=True)

            if result.stdout.strip():
                views = json.loads(result.stdout)
                for view in views:
                    view_id = view['view-id']
                    is_shared = view.get('is-shared', False)
                    display_name = view.get('display-name', view_id)

                    if is_shared:
                        print(f"[INFO] Skipping shared view: {display_name}")
                    else:
                        print(f"[INFO] Detaching and deleting private view: {display_name}")
                        subprocess.run([
                            "oci", "dns", "view", "detach",
                            "--resolver-id", resolver_id,
                            "--view-id", view_id,
                            "--region", region,
                            "--force",
                            "--config-file", config,
                            "--profile", profile
                        ], check=True)
                        subprocess.run([
                            "oci", "dns", "view", "delete",
                            "--view-id", view_id,
                            "--region", region,
                            "--force",
                            "--config-file", config,
                            "--profile", profile
                        ], check=True)
        except subprocess.CalledProcessError as e:
            print(f"[ERROR] Failed to detach/delete views: {e.stderr.strip()}")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--resolver-ids', required=True, help='Comma-separated resolver IDs')
    parser.add_argument('--region', required=True)
    parser.add_argument('--config', default='~/.oci/config')
    parser.add_argument('--profile', default='DEFAULT')
    args = parser.parse_args()

    resolver_ids = args.resolver_ids.split(",")

    delete_endpoints(resolver_ids, args.region, args.config, args.profile)
    detach_and_delete_views(resolver_ids, args.region, args.config, args.profile)

if __name__ == "__main__":
    main()


# Sample Ansible tasks (main.yml snippet)

- name: Fetch DNS Resolver IDs
  command: >
    python3 py-scripts/fetch_resolvers.py
    --compartment-id {{ compartment_id }}
    --region {{ region }}
    --config {{ oci_config_path }}
    --profile {{ oci_profile }}
  register: resolver_ids_output

- name: Parse resolver ID list
  set_fact:
    resolver_ids: "{{ resolver_ids_output.stdout | from_json }}"

- name: Delete DNS Resolver Rules
  shell: >
    oci dns resolver rule delete --rule-id {{ item }} --region {{ region }} --force \
    --config-file {{ oci_config_path }} --profile {{ oci_profile }}
  loop: "{{ resolver_ids }}"
  ignore_errors: true

- name: Delete endpoints and views
  command: >
    python3 py-scripts/delete_endpoints_views.py
    --resolver-ids "{{ resolver_ids | join(',') }}"
    --region {{ region }}
    --config {{ oci_config_path }}
    --profile {{ oci_profile }}
  register: endpoint_view_deletion
